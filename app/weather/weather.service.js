"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var WeatherService = /** @class */ (function () {
    function WeatherService() {
        this.wx = {};
        this.qnhNumber = 1013;
        this.createNewWeather();
    }
    WeatherService.prototype.createNewWeather = function () {
        this.generateWx();
        return this.wx;
    };
    WeatherService.prototype.setWx = function (wx) {
        this.wx.wx.push(wx);
    };
    WeatherService.prototype.setVis = function (visMax, visMin, comment) {
        this.wx.vis = {};
        this.wx.vis.max = visMax;
        this.wx.vis.min = visMin;
        this.wx.vis.comment = comment;
    };
    WeatherService.prototype.setWind = function (direction, variation, strength, gustStrength) {
        this.wx.windStrength = strength;
        this.wx.windGustStrength = gustStrength;
        this.wx.windDirection = direction;
        this.wx.windDirectionVariation = variation;
    };
    WeatherService.prototype.setCloud = function (base, tops, coverage) {
        var cloud = {};
        cloud.base = base;
        cloud.tops = tops;
        cloud.coverage = coverage;
        this.wx.cloud.push(cloud);
    };
    WeatherService.prototype.setTemp = function (temp, dewpoint) {
        this.wx.temp = temp;
        this.wx.dewpoint = dewpoint;
    };
    WeatherService.prototype.getGroundCondition = function () {
        return this.wx.groundCondition;
    };
    WeatherService.prototype.setGround = function (cond) {
        this.wx.groundCondition = cond;
    };
    WeatherService.prototype.generateWind = function () {
        var windStrength = Math.floor(Math.random() * 17);
        var windGustStrength = Math.floor(Math.random() * 10);
        var windDirection = Math.floor(Math.random() * 36) * 10;
        var windDirectionVariation = Math.floor(Math.random() * 4) * 10;
        this.setWind(windDirection, windDirectionVariation, windStrength, windGustStrength);
    };
    WeatherService.prototype.generateTemp = function () {
        var temp = Math.floor(5 + Math.random() * 35);
        var rh = 50 + 50 * Math.random();
        var dewpoint = Math.floor(temp - (100 - rh) / 5);
        this.setTemp(temp, dewpoint);
    };
    WeatherService.prototype.generateWx = function () {
        this.qnhNumber = Math.floor(1023 - (Math.random() * 20));
        this.wx.qnh = this.toNumbers(this.qnhNumber);
        this.wx.cloud = [];
        this.generateWind();
        this.generateTemp();
        this.setVis(9999, 9999, '');
        this.setGround('');
        this.wx.wx = [];
        var maxOpts = 10;
        var dice = Math.round(Math.random() * maxOpts);
        var subDice = Math.round(Math.random() * maxOpts);
        switch (dice) {
            case 0:
                this.setWx('THUNDERSTORMS IN AREA');
                this.setCloud(2500, 14500, 3);
                this.setTemp(24, 18);
                var dir = Math.round(Math.random() * 36) * 10;
                var v = dir + 40;
                this.setWind(dir, v, 15, 20);
                this.setGround('WATER PATCHES');
                break;
            case 1:
                this.setWx('SHOWERS OF RAIN IN AREA');
                this.setCloud(2000, 4500, 6);
                this.setVis(9999, 4000, 'IN RAIN');
                this.setGround('WET');
                break;
            case 2:
                this.setWx('FOG IN AREA');
                this.setCloud(500, 1200, 7);
                this.setVis(2000, 400, 'IN FOG');
                this.setWind(0, 0, 0, 0);
                this.setTemp(11, 11);
                break;
            case 3:
                this.setWx('FOG');
                this.setVis(500, 500, 'IN FOG');
                this.wx.cloud = [];
                this.setWind(0, 0, 0, 0);
                this.setTemp(10, 10);
                this.setGround('DAMP');
                break;
            case 4:
            case 5:
            case 6:
                this.generateCloud();
                break;
            case 7:
            case 8:
            default:
                this.setWx('CAVOK');
                this.setVis(9999, 9999, '');
                break;
        }
        this.processCloud();
        console.log(this.awis());
    };
    WeatherService.prototype.generateCloud = function () {
        var layers = Math.round(Math.random() * 3);
        var alts = [800, 1500, 2000, 2500, 3000, 3500, 4000, 5000, 7000];
        this.wx.cloud = [];
        var coverage = Math.round(Math.random() * 8);
        for (var i = 0; i < layers; i++) {
            var layerI = Math.round(Math.random() * alts.length);
            var base = alts[layerI];
            var extent = Math.round(Math.random() * 3000);
            var tops = base + extent;
            this.setCloud(base, tops, coverage);
            if (++coverage > 8) {
                return;
            }
        }
    };
    WeatherService.prototype.oktasToString = function (o) {
        if (o >= 8) {
            return 'overcast';
        }
        else if (o > 4) {
            return 'broken';
        }
        else if (o > 3) {
            return 'scattered';
        }
        else if (o > 1) {
            return 'few';
        }
        else if (o > 0) {
            return 'isolated';
        }
        return '';
    };
    WeatherService.prototype.visAsString = function () {
        var v = this.stNumber(this.wx.vis.max) + ' metres';
        if (this.wx.vis.max === 9999) {
            v = 'greater than ten kilometres';
        }
        else if (this.wx.vis.max > 5000) {
            v = this.stNumber(this.wx.vis.max / 1000) + ' kilometres';
        }
        if (this.wx.vis.max > this.wx.vis.min) {
            v += ' reducing to ';
            if (this.wx.vis.min === 9999) {
                v += ' greater than ten kilometres';
            }
            else if (this.wx.vis.min > 5000) {
                v += this.stNumber(this.wx.vis.min / 1000) + ' kilometres';
            }
            else {
                v += this.stNumber(this.wx.vis.min) + ' metres';
            }
            v += ' ' + this.wx.vis.comment;
        }
        return v;
    };
    WeatherService.prototype.stNumber = function (n) {
        if (n === undefined) {
            return '';
        }
        var digits = n.toString().split('');
        if (n >= 1000) {
            var nst = this.toNumbers(Number(digits[0])) + ' thousand';
            if (digits[1] !== '0') {
                nst += ' ' + this.toNumbers(Number(digits[1])) + ' hundred';
            }
            return nst;
        }
        else if (n >= 100) {
            var nst = this.toNumbers(Number(digits[0])) + ' hundred';
            return nst;
        }
        else {
            var nst = this.toNumbers(n);
        }
    };
    WeatherService.prototype.awis = function () {
        var st = "wind: " + this.windAsString() + "  QNH " + this.wx.qnh + ", Temperature " + this.wx.temp + " dewpoint " + this.wx.dewpoint + ", visibility " + this.visAsString() + " " + this.wx.groundCondition + " cloud " + this.cloudAsString() + " " + this.weatherAsString() + "\n\n";
        return st;
    };
    WeatherService.prototype.processCloud = function () {
        var c = {};
        for (var i = 0; i < this.wx.cloud.length; i++) {
            var cloud = this.wx.cloud[i];
            c[cloud.base] = cloud;
        }
        this.wx.cloud = [];
        var alts = Object.keys(c).sort();
        for (var i = 0; i < alts.length; i++) {
            this.wx.cloud.push(c[alts[i]]);
        }
    };
    WeatherService.prototype.windAsString = function () {
        if (this.wx.windStrength === 0) {
            return 'calm';
        }
        else if (this.wx.windStrength <= 4) {
            return 'variable';
        }
        var st = '';
        if (this.wx.windDirectionVariation > 0) {
            var windDirTo = (this.wx.windDirection + this.wx.windDirectionVariation % 360);
            st = 'varying between ' + this.toNumbers(this.wx.windDirection) + ' and ' + this.toNumbers(windDirTo);
        }
        else {
            st = this.toNumbers(this.wx.windDirection);
        }
        st += ' degrees, ';
        if (this.wx.windGustStrength > this.wx.windStrength) {
            st += ' minimum ' + this.toNumbers(this.wx.windStrength) + ' maximum ' + this.toNumbers(this.wx.windGustStrength) + ' knots';
        }
        else {
            st += ' ' + this.toNumbers(this.wx.windStrength) + ' knots';
        }
        return st;
    };
    WeatherService.prototype.visAsShorthand = function () {
        var v = (this.wx.vis.max).toString() + 'm';
        if (this.wx.vis.max === 9999) {
            v = '>10k';
        }
        else if (this.wx.vis.max > 5000) {
            v = (this.wx.vis.max / 1000).toString() + 'k';
        }
        if (this.wx.vis.max > this.wx.vis.min) {
            v += ' &#9824; ';
            if (this.wx.vis.min === 9999) {
                v += ' >10k';
            }
            else if (this.wx.vis.min > 5000) {
                v += (this.wx.vis.min / 1000).toString() + 'k';
            }
            else {
                v += this.wx.vis.min.toString() + 'm';
            }
            v += ' ' + this.wx.vis.comment.toLowerCase();
        }
        return v;
    };
    WeatherService.prototype.windAsShorthand = function () {
        var wind = '';
        if (this.wx.windStrength === 0) {
            return 'wnd clm';
        }
        else if (this.wx.windStrength <= 4) {
            return 'wnd vbl';
        }
        var st = '';
        if (this.wx.windDirectionVariation > 0) {
            var windDirTo = (this.wx.windDirection + this.wx.windDirectionVariation % 360);
            st = this.wx.windDirection + ' - ' + windDirTo;
        }
        else {
            st = this.wx.windDirection.toString();
        }
        st += '/';
        if (this.wx.windGustStrength > this.wx.windStrength) {
            st += this.wx.windStrength + ' - ' + this.wx.windGustStrength;
        }
        else {
            st += this.wx.windStrength.toString();
        }
        return st;
    };
    WeatherService.prototype.isCAVOK = function () {
        return /CAVOK/.test(this.weatherAsString());
    };
    WeatherService.prototype.isFOG = function () {
        if (/FOG IN AREA/.test(this.weatherAsString())) {
            return false;
        }
        ;
        return /FOG/.test(this.weatherAsString());
    };
    WeatherService.prototype.isRVFR = function () {
        if ((this.wx.vis.min <= 5000) && (this.wx.vis.min >= 1600)) {
            return true;
        }
        return false;
    };
    WeatherService.prototype.isVFR = function () {
        if (this.isRVFR()) {
            return true;
        }
        if (this.wx.vis.min <= 5000) {
            return false;
        }
        var clouds = this.wx.cloud;
        var coverage = 0;
        for (var i = 0; i < clouds.length; i++) {
            var c = clouds[i];
            if (c.base < 1800) {
                coverage += c.coverage;
            }
        }
        if (coverage >= 2) {
            return false;
        }
        return true;
    };
    WeatherService.prototype.isIMC = function () {
        if (this.wx.vis.min <= 5000) {
            return true;
        }
        var clouds = this.wx.cloud;
        var coverage = 0;
        for (var i = 0; i < clouds.length; i++) {
            var c = clouds[i];
            if (c.base < 1800) {
                coverage += c.coverage;
            }
        }
        if (coverage >= 7) {
            return true;
        }
        return false;
    };
    WeatherService.prototype.cloudAsString = function () {
        if (this.wx.cloud.length === 0) {
            return 'nil';
        }
        else {
            var st = '';
            for (var i = 0; i < this.wx.cloud.length; i++) {
                var cloud = this.wx.cloud[i];
                st += ' ' + this.oktasToString(cloud.coverage) + ' ' + this.stNumber(cloud.base);
            }
            return st;
        }
    };
    WeatherService.prototype.weatherAsString = function () {
        if (this.wx.wx.length === 0) {
            return '';
        }
        else {
            return this.wx.wx.join(', ');
        }
    };
    WeatherService.prototype.toNumbers = function (n) {
        var map = {
            '0': 'zero',
            '1': 'wun',
            '2': 'two',
            '3': 'three',
            '4': 'fore',
            '5': 'fife',
            '6': 'six',
            '7': 'seffen',
            '8': 'eight',
            '9': 'niner',
        };
        var nst = n.toString();
        var d = nst.split('');
        var response = [];
        for (var i = 0; i < d.length; i++) {
            var dst = d[i];
            var dPhon = map[dst];
            if (dPhon !== undefined) {
                response.push(dPhon);
            }
            else {
                response.push(dst);
            }
        }
        return response.join(' ');
    };
    WeatherService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], WeatherService);
    return WeatherService;
}());
exports.WeatherService = WeatherService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2VhdGhlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VhdGhlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBSTNDO0lBTUU7UUFKTSxPQUFFLEdBQVksRUFBUyxDQUFDO1FBRXZCLGNBQVMsR0FBVyxJQUFJLENBQUM7UUFHaEMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUVBLHlDQUFnQixHQUF2QjtRQUNDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCw4QkFBSyxHQUFMLFVBQU0sRUFBVTtRQUNmLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBRUQsK0JBQU0sR0FBTixVQUFPLE1BQWMsRUFBRSxNQUFjLEVBQUUsT0FBZTtRQUNyRCxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFTLENBQUM7UUFDeEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQztRQUN6QixJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDL0IsQ0FBQztJQUVELGdDQUFPLEdBQVAsVUFBUSxTQUFpQixFQUFFLFNBQWlCLEVBQUUsUUFBZ0IsRUFBRSxZQUFvQjtRQUNuRixJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUM7UUFDaEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsR0FBRyxZQUFZLENBQUM7UUFDeEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDO1FBQ2xD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LEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ25DLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNmLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNyQixFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDekIsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0QixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ1IsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQixDQUFDO1FBQ0YsQ0FBQztRQUNELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUF4WVMsY0FBYztRQUQxQixpQkFBVSxFQUFFOztPQUNBLGNBQWMsQ0EyWTFCO0lBQUQscUJBQUM7Q0FBQSxBQTNZRCxJQTJZQztBQTNZWSx3Q0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFdlYXRoZXIsIENsb3VkIH0gZnJvbSAnLi93ZWF0aGVyLmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBXZWF0aGVyU2VydmljZSB7XG5cbnByaXZhdGUgd3g6IFdlYXRoZXIgPSB7fSBhcyBhbnk7XG5cbiAgcHVibGljIHFuaE51bWJlcjogbnVtYmVyID0gMTAxMztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiBcdHRoaXMuY3JlYXRlTmV3V2VhdGhlcigpO1xuICAgICAgIFx0fVxuXG4gIHB1YmxpYyBjcmVhdGVOZXdXZWF0aGVyKCk6IFdlYXRoZXIge1xuICBcdHRoaXMuZ2VuZXJhdGVXeCgpO1xuXHRyZXR1cm4gdGhpcy53eDtcbiAgfVxuXG4gIHNldFd4KHd4OiBzdHJpbmcpIHtcbiAgXHR0aGlzLnd4Lnd4LnB1c2god3gpO1xuICB9XG5cbiAgc2V0VmlzKHZpc01heDogbnVtYmVyLCB2aXNNaW46IG51bWJlciwgY29tbWVudDogc3RyaW5nKSB7XG4gIFx0dGhpcy53eC52aXMgPSB7fSBhcyBhbnk7XG4gIFx0dGhpcy53eC52aXMubWF4ID0gdmlzTWF4O1xuICBcdHRoaXMud3gudmlzLm1pbiA9IHZpc01pbjtcbiAgXHR0aGlzLnd4LnZpcy5jb21tZW50ID0gY29tbWVudDtcbiAgfVxuXG4gIHNldFdpbmQoZGlyZWN0aW9uOiBudW1iZXIsIHZhcmlhdGlvbjogbnVtYmVyLCBzdHJlbmd0aDogbnVtYmVyLCBndXN0U3RyZW5ndGg6IG51bWJlcikge1xuXHQgIHRoaXMud3gud2luZFN0cmVuZ3RoID0gc3RyZW5ndGg7XG5cdCAgdGhpcy53eC53aW5kR3VzdFN0cmVuZ3RoID0gZ3VzdFN0cmVuZ3RoO1xuXHQgIHRoaXMud3gud2luZERpcmVjdGlvbiA9IGRpcmVjdGlvbjtcblx0ICB0aGlzLnd4LndpbmREaXJlY3Rpb25WYXJpYXRpb24gPSB2YXJpYXRpb247XG4gIH1cblxuICBzZXRDbG91ZChiYXNlOiBudW1iZXIsIHRvcHM6IG51bWJlciwgY292ZXJhZ2U6IG51bWJlcikge1xuICBcdGxldCBjbG91ZDpDbG91ZCA9IHt9IGFzIGFueTtcblx0Y2xvdWQuYmFzZSA9IGJhc2U7XG5cdGNsb3VkLnRvcHMgPSB0b3BzO1xuXHRjbG91ZC5jb3ZlcmFnZSA9IGNvdmVyYWdlO1xuXHR0aGlzLnd4LmNsb3VkLnB1c2goY2xvdWQpO1xuICB9XG5cbiAgc2V0VGVtcCh0ZW1wOiBudW1iZXIsIGRld3BvaW50OiBudW1iZXIpIHtcbiAgXHR0aGlzLnd4LnRlbXAgPSB0ZW1wO1xuXHR0aGlzLnd4LmRld3BvaW50ID0gZGV3cG9pbnQ7XG4gIH1cblxuICBnZXRHcm91bmRDb25kaXRpb24oKSB7XG4gIFx0cmV0dXJuIHRoaXMud3guZ3JvdW5kQ29uZGl0aW9uO1xuICB9XG5cbiAgc2V0R3JvdW5kKGNvbmQ6IHN0cmluZykge1xuICBcdHRoaXMud3guZ3JvdW5kQ29uZGl0aW9uID0gY29uZDtcbiAgfVxuXG4gIGdlbmVyYXRlV2luZCgpIHtcblx0bGV0IHdpbmRTdHJlbmd0aCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDE3KTtcblx0bGV0IHdpbmRHdXN0U3RyZW5ndGggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG5cdGxldCB3aW5kRGlyZWN0aW9uID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMzYpICogMTA7XG5cdGxldCB3aW5kRGlyZWN0aW9uVmFyaWF0aW9uID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNCkgKiAxMDtcblx0dGhpcy5zZXRXaW5kKHdpbmREaXJlY3Rpb24sIHdpbmREaXJlY3Rpb25WYXJpYXRpb24sIHdpbmRTdHJlbmd0aCwgd2luZEd1c3RTdHJlbmd0aCk7XG4gIH1cblxuICBnZW5lcmF0ZVRlbXAoKSB7XG5cdGxldCB0ZW1wID0gTWF0aC5mbG9vcig1ICsgTWF0aC5yYW5kb20oKSAqIDM1KTtcblx0bGV0IHJoID0gNTAgKyA1MCAqIE1hdGgucmFuZG9tKCk7XG5cdGxldCBkZXdwb2ludCA9IE1hdGguZmxvb3IodGVtcCAtICgxMDAgLSByaCkvNSlcblx0dGhpcy5zZXRUZW1wKHRlbXAsIGRld3BvaW50KTtcbiAgfVxuXG4gIHB1YmxpYyBnZW5lcmF0ZVd4KCkge1xuICBcdHRoaXMucW5oTnVtYmVyID0gTWF0aC5mbG9vcigxMDIzIC0gKE1hdGgucmFuZG9tKCkgKiAyMCkpO1xuICBcdHRoaXMud3gucW5oID0gdGhpcy50b051bWJlcnModGhpcy5xbmhOdW1iZXIpO1xuXHR0aGlzLnd4LmNsb3VkID0gW107XG4gIFx0dGhpcy5nZW5lcmF0ZVdpbmQoKTtcbiAgXHR0aGlzLmdlbmVyYXRlVGVtcCgpO1xuICBcdHRoaXMuc2V0VmlzKDk5OTksIDk5OTksICcnKTtcbiAgXHR0aGlzLnNldEdyb3VuZCgnJyk7XG4gIFx0dGhpcy53eC53eCA9IFtdO1xuXG4gIFx0bGV0IG1heE9wdHMgPSAxMDtcblx0bGV0IGRpY2UgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiBtYXhPcHRzKTtcblx0bGV0IHN1YkRpY2UgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiBtYXhPcHRzKTtcblx0c3dpdGNoIChkaWNlKSB7XG5cdFx0Y2FzZSAwOlxuXHRcdFx0dGhpcy5zZXRXeCgnVEhVTkRFUlNUT1JNUyBJTiBBUkVBJyk7XG5cdFx0XHR0aGlzLnNldENsb3VkKDI1MDAsIDE0NTAwLCAzKTtcblx0XHRcdHRoaXMuc2V0VGVtcCgyNCwgMTgpO1xuXHRcdFx0bGV0IGRpcjogbnVtYmVyID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKjM2KSAqIDEwO1xuXHRcdFx0bGV0IHY6IG51bWJlciA9IGRpciArIDQwO1xuXHRcdFx0dGhpcy5zZXRXaW5kKGRpciwgdiwgMTUsIDIwKTtcblx0XHRcdHRoaXMuc2V0R3JvdW5kKCdXQVRFUiBQQVRDSEVTJyk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDE6XG5cdFx0XHR0aGlzLnNldFd4KCdTSE9XRVJTIE9GIFJBSU4gSU4gQVJFQScpO1xuXHRcdFx0dGhpcy5zZXRDbG91ZCgyMDAwLCA0NTAwLCA2KTtcblx0XHRcdHRoaXMuc2V0VmlzKDk5OTksIDQwMDAsICdJTiBSQUlOJyk7XG5cdFx0XHR0aGlzLnNldEdyb3VuZCgnV0VUJyk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIDI6XG5cdFx0XHR0aGlzLnNldFd4KCdGT0cgSU4gQVJFQScpO1xuXHRcdFx0dGhpcy5zZXRDbG91ZCg1MDAsIDEyMDAsIDcpO1xuXHRcdFx0dGhpcy5zZXRWaXMoMjAwMCwgNDAwLCAnSU4gRk9HJyk7XG5cdFx0XHR0aGlzLnNldFdpbmQoMCwgMCwgMCwgMCk7XG5cdFx0XHR0aGlzLnNldFRlbXAoMTEsIDExKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgMzpcblx0XHRcdHRoaXMuc2V0V3goJ0ZPRycpO1xuXHRcdFx0dGhpcy5zZXRWaXMoNTAwLCA1MDAsICdJTiBGT0cnKTtcblx0XHRcdHRoaXMud3guY2xvdWQgPSBbXTtcblx0XHRcdHRoaXMuc2V0V2luZCgwLCAwLCAwLCAwKTtcblx0XHRcdHRoaXMuc2V0VGVtcCgxMCwgMTApO1xuXHRcdFx0dGhpcy5zZXRHcm91bmQoJ0RBTVAnKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgNDpcblx0XHRjYXNlIDU6XG5cdFx0Y2FzZSA2OlxuICBcdFx0XHR0aGlzLmdlbmVyYXRlQ2xvdWQoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgNzpcblx0XHRjYXNlIDg6XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHRoaXMuc2V0V3goJ0NBVk9LJyk7XG5cdFx0XHR0aGlzLnNldFZpcyg5OTk5LCA5OTk5LCAnJyk7XG5cdFx0XHRicmVhaztcblx0fVxuXHR0aGlzLnByb2Nlc3NDbG91ZCgpO1xuXHRjb25zb2xlLmxvZyh0aGlzLmF3aXMoKSk7XG4gIH1cblxuICBwdWJsaWMgZ2VuZXJhdGVDbG91ZCgpIHtcbiAgXHRsZXQgbGF5ZXJzID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMyk7XG5cdGxldCBhbHRzID0gWyA4MDAsIDE1MDAsIDIwMDAsIDI1MDAsIDMwMDAsIDM1MDAsIDQwMDAsIDUwMDAsIDcwMDAgXTtcblx0dGhpcy53eC5jbG91ZCA9IFtdO1xuXHRsZXQgY292ZXJhZ2UgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiA4KTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsYXllcnM7IGkrKykge1xuXHRcdGxldCBsYXllckkgPSAgTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogYWx0cy5sZW5ndGgpO1xuXHRcdGxldCBiYXNlID0gYWx0c1tsYXllckldO1xuXHRcdGxldCBleHRlbnQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAzMDAwKTtcblx0XHRsZXQgdG9wcyA9IGJhc2UgKyBleHRlbnQ7XG5cdFx0dGhpcy5zZXRDbG91ZChiYXNlLCB0b3BzLCBjb3ZlcmFnZSk7XG5cdFx0aWYgKCsrY292ZXJhZ2UgPiA4KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHR9XG4gIH1cblxuICBva3Rhc1RvU3RyaW5nKG86IG51bWJlcikge1xuICBcdGlmIChvID49IDgpIHtcblx0XHRyZXR1cm4gJ292ZXJjYXN0Jztcblx0fSBlbHNlIGlmIChvID4gNCkge1xuXHRcdHJldHVybiAnYnJva2VuJztcblx0fSBlbHNlIGlmIChvID4gMykge1xuXHRcdHJldHVybiAnc2NhdHRlcmVkJztcblx0fSBlbHNlIGlmIChvID4gMSkge1xuXHRcdHJldHVybiAnZmV3Jztcblx0fSBlbHNlIGlmIChvID4gMCkge1xuXHRcdHJldHVybiAnaXNvbGF0ZWQnO1xuXHR9XG5cdHJldHVybiAnJ1xuICB9XG5cbiAgcHVibGljIHZpc0FzU3RyaW5nKCk6IHN0cmluZyB7XG4gIFx0bGV0IHYgPSB0aGlzLnN0TnVtYmVyKHRoaXMud3gudmlzLm1heCkgKyAnIG1ldHJlcyc7XG4gIFx0aWYgKHRoaXMud3gudmlzLm1heCA9PT0gOTk5OSkge1xuXHRcdHYgPSAnZ3JlYXRlciB0aGFuIHRlbiBraWxvbWV0cmVzJztcblx0fSBlbHNlIGlmICh0aGlzLnd4LnZpcy5tYXggPiA1MDAwKSB7XG5cdFx0diA9IHRoaXMuc3ROdW1iZXIodGhpcy53eC52aXMubWF4IC8gMTAwMCkgKyAnIGtpbG9tZXRyZXMnO1xuXHR9XG5cblx0aWYgKHRoaXMud3gudmlzLm1heCA+IHRoaXMud3gudmlzLm1pbikge1xuXHRcdHYgKz0gJyByZWR1Y2luZyB0byAnO1xuICBcdFx0aWYgKHRoaXMud3gudmlzLm1pbiA9PT0gOTk5OSkge1xuXHRcdFx0diArPSAnIGdyZWF0ZXIgdGhhbiB0ZW4ga2lsb21ldHJlcyc7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMud3gudmlzLm1pbiA+IDUwMDApIHtcblx0XHRcdHYgKz0gdGhpcy5zdE51bWJlcih0aGlzLnd4LnZpcy5taW4gLyAxMDAwKSArICcga2lsb21ldHJlcyc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHYgKz0gdGhpcy5zdE51bWJlcih0aGlzLnd4LnZpcy5taW4pICsgJyBtZXRyZXMnO1xuXHRcdH1cblx0XHR2ICs9ICcgJyArIHRoaXMud3gudmlzLmNvbW1lbnQ7XG5cdH1cblx0cmV0dXJuIHY7XG4gICB9XG5cbiAgIHN0TnVtYmVyKG46IG51bWJlcikgOiBzdHJpbmcge1xuICAgXHRpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG4gICAgICAgIGxldCBkaWdpdHM6IHN0cmluZ1tdID0gbi50b1N0cmluZygpLnNwbGl0KCcnKTtcbiAgIFx0aWYgKG4gPj0gMTAwMCkge1xuXHRcdGxldCBuc3QgPSB0aGlzLnRvTnVtYmVycyhOdW1iZXIoZGlnaXRzWzBdKSkgKyAnIHRob3VzYW5kJztcblx0XHRpZiAoZGlnaXRzWzFdICE9PSAnMCcpIHtcblx0XHRcdG5zdCArPSAnICcgKyB0aGlzLnRvTnVtYmVycyhOdW1iZXIoZGlnaXRzWzFdKSkgKyAnIGh1bmRyZWQnO1xuXHRcdH1cblx0XHRyZXR1cm4gbnN0O1xuXHRcdFxuXHR9IGVsc2UgaWYgKG4gPj0gMTAwKSB7XG5cdFx0bGV0IG5zdCA9IHRoaXMudG9OdW1iZXJzKE51bWJlcihkaWdpdHNbMF0pKSArICcgaHVuZHJlZCc7XG5cdFx0cmV0dXJuIG5zdDtcblx0fSBlbHNlIHtcblx0XHRsZXQgbnN0ID0gdGhpcy50b051bWJlcnMobik7XG5cdH1cbiAgfVxuXG4gIHB1YmxpYyBhd2lzKCkgOiBzdHJpbmcge1xuXHRsZXQgc3QgPSBcIndpbmQ6IFwiICsgdGhpcy53aW5kQXNTdHJpbmcoKSArIFwiICBRTkggXCIgKyB0aGlzLnd4LnFuaCArIFwiLCBUZW1wZXJhdHVyZSBcIiArIHRoaXMud3gudGVtcCArIFwiIGRld3BvaW50IFwiICsgdGhpcy53eC5kZXdwb2ludCArIFwiLCB2aXNpYmlsaXR5IFwiICsgdGhpcy52aXNBc1N0cmluZygpICsgXCIgXCIgKyB0aGlzLnd4Lmdyb3VuZENvbmRpdGlvbiArIFwiIGNsb3VkIFwiICsgdGhpcy5jbG91ZEFzU3RyaW5nKCkgKyBcIiBcIiArIHRoaXMud2VhdGhlckFzU3RyaW5nKCkgKyBcIlxcblxcblwiO1xuXHRyZXR1cm4gc3Q7XG4gIH1cblxuICBwcm9jZXNzQ2xvdWQoKSB7XG4gIFx0bGV0IGM6IGFueSA9IHt9O1xuICBcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy53eC5jbG91ZC5sZW5ndGg7IGkrKykge1xuXHRcdGxldCBjbG91ZDogQ2xvdWQgPSB0aGlzLnd4LmNsb3VkW2ldO1xuXHRcdGNbY2xvdWQuYmFzZV0gPSBjbG91ZDtcblx0fVxuXHR0aGlzLnd4LmNsb3VkID0gW107XG5cdGxldCBhbHRzID0gT2JqZWN0LmtleXMoYykuc29ydCgpO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IGFsdHMubGVuZ3RoOyBpKyspIHtcblx0XHR0aGlzLnd4LmNsb3VkLnB1c2goY1thbHRzW2ldXSk7XG5cdH1cbiAgfVxuXG4gIHdpbmRBc1N0cmluZygpOiBzdHJpbmcge1xuXHQgIGlmICh0aGlzLnd4LndpbmRTdHJlbmd0aCA9PT0gMCkge1xuXHQgIFx0cmV0dXJuICdjYWxtJztcblx0ICB9IGVsc2UgaWYgKHRoaXMud3gud2luZFN0cmVuZ3RoIDw9IDQpIHtcblx0ICBcdHJldHVybiAndmFyaWFibGUnO1xuXHQgIH1cblx0ICBsZXQgc3QgPSAnJztcblx0ICBpZiAodGhpcy53eC53aW5kRGlyZWN0aW9uVmFyaWF0aW9uID4gMCkge1xuICAgICAgICBcdGxldCB3aW5kRGlyVG8gPSAodGhpcy53eC53aW5kRGlyZWN0aW9uICsgdGhpcy53eC53aW5kRGlyZWN0aW9uVmFyaWF0aW9uICUgMzYwKTtcblx0ICBcdHN0ID0gJ3ZhcnlpbmcgYmV0d2VlbiAnICsgdGhpcy50b051bWJlcnModGhpcy53eC53aW5kRGlyZWN0aW9uKSArICcgYW5kICcgKyB0aGlzLnRvTnVtYmVycyh3aW5kRGlyVG8pO1xuXHQgIH0gZWxzZSB7XG5cdCAgXHRzdCA9IHRoaXMudG9OdW1iZXJzKHRoaXMud3gud2luZERpcmVjdGlvbik7XG5cdCAgfVxuXHQgIHN0ICs9ICcgZGVncmVlcywgJztcblx0ICBpZiAodGhpcy53eC53aW5kR3VzdFN0cmVuZ3RoID4gdGhpcy53eC53aW5kU3RyZW5ndGgpIHtcblx0ICBcdHN0ICs9ICcgbWluaW11bSAnICsgdGhpcy50b051bWJlcnModGhpcy53eC53aW5kU3RyZW5ndGgpICsgJyBtYXhpbXVtICcgKyB0aGlzLnRvTnVtYmVycyh0aGlzLnd4LndpbmRHdXN0U3RyZW5ndGgpICArICcga25vdHMnXG5cdCAgfSBlbHNlIHtcblx0ICBcdHN0ICs9ICcgJyArIHRoaXMudG9OdW1iZXJzKHRoaXMud3gud2luZFN0cmVuZ3RoKSArICcga25vdHMnXG5cdCAgfVxuXHQgIHJldHVybiBzdDtcbiAgfVxuXG4gIHB1YmxpYyB2aXNBc1Nob3J0aGFuZCgpOiBzdHJpbmcge1xuICBcdGxldCB2ID0gKHRoaXMud3gudmlzLm1heCkudG9TdHJpbmcoKSArICdtJztcbiAgXHRpZiAodGhpcy53eC52aXMubWF4ID09PSA5OTk5KSB7XG5cdHYgPSAnPjEwayc7XG5cdH0gZWxzZSBpZiAodGhpcy53eC52aXMubWF4ID4gNTAwMCkge1xuXHRcdHYgPSAodGhpcy53eC52aXMubWF4IC8gMTAwMCkudG9TdHJpbmcoKSArICdrJztcblx0fVxuXG5cdGlmICh0aGlzLnd4LnZpcy5tYXggPiB0aGlzLnd4LnZpcy5taW4pIHtcblx0XHR2ICs9ICcgJiM5ODI0OyAnO1xuICBcdFx0aWYgKHRoaXMud3gudmlzLm1pbiA9PT0gOTk5OSkge1xuXHRcdFx0diArPSAnID4xMGsnO1xuXHRcdH0gZWxzZSBpZiAodGhpcy53eC52aXMubWluID4gNTAwMCkge1xuXHRcdFx0diArPSAodGhpcy53eC52aXMubWluIC8gMTAwMCkudG9TdHJpbmcoKSArICdrJztcblx0XHR9IGVsc2Uge1xuXHRcdFx0diArPSB0aGlzLnd4LnZpcy5taW4udG9TdHJpbmcoKSArICdtJztcblx0XHR9XG5cdFx0diArPSAnICcgKyB0aGlzLnd4LnZpcy5jb21tZW50LnRvTG93ZXJDYXNlKCk7XG5cdH1cblx0cmV0dXJuIHY7XG4gICB9XG5cbiAgd2luZEFzU2hvcnRoYW5kKCk6IHN0cmluZyB7XG4gIFx0bGV0IHdpbmQgPSAnJ1xuXHQgIGlmICh0aGlzLnd4LndpbmRTdHJlbmd0aCA9PT0gMCkge1xuXHQgIFx0cmV0dXJuICd3bmQgY2xtJztcblx0ICB9IGVsc2UgaWYgKHRoaXMud3gud2luZFN0cmVuZ3RoIDw9IDQpIHtcblx0ICBcdHJldHVybiAnd25kIHZibCc7XG5cdCAgfVxuXHQgIGxldCBzdCA9ICcnO1xuXHQgIGlmICh0aGlzLnd4LndpbmREaXJlY3Rpb25WYXJpYXRpb24gPiAwKSB7XG4gICAgICAgIFx0bGV0IHdpbmREaXJUbyA9ICh0aGlzLnd4LndpbmREaXJlY3Rpb24gKyB0aGlzLnd4LndpbmREaXJlY3Rpb25WYXJpYXRpb24gJSAzNjApO1xuXHQgIFx0c3QgPSB0aGlzLnd4LndpbmREaXJlY3Rpb24gKyAnIC0gJyArIHdpbmREaXJUbztcblx0ICB9IGVsc2Uge1xuXHQgIFx0c3QgPSB0aGlzLnd4LndpbmREaXJlY3Rpb24udG9TdHJpbmcoKTtcblx0ICB9XG5cdCAgc3QgKz0gJy8nO1xuXHQgIGlmICh0aGlzLnd4LndpbmRHdXN0U3RyZW5ndGggPiB0aGlzLnd4LndpbmRTdHJlbmd0aCkge1xuXHQgIFx0c3QgKz0gdGhpcy53eC53aW5kU3RyZW5ndGggKyAnIC0gJyArIHRoaXMud3gud2luZEd1c3RTdHJlbmd0aDtcblx0ICB9IGVsc2Uge1xuXHQgIFx0c3QgKz0gdGhpcy53eC53aW5kU3RyZW5ndGgudG9TdHJpbmcoKTtcblx0ICB9XG5cdCAgcmV0dXJuIHN0O1xuICB9XG5cbiAgaXNDQVZPSygpIDogYm9vbGVhbiB7XG4gIFx0cmV0dXJuIC9DQVZPSy8udGVzdCh0aGlzLndlYXRoZXJBc1N0cmluZygpKTtcbiAgfVxuXG4gIGlzRk9HKCkgOiBib29sZWFuIHtcblx0ICBpZiAoL0ZPRyBJTiBBUkVBLy50ZXN0KHRoaXMud2VhdGhlckFzU3RyaW5nKCkpKSB7XG5cdCAgXHRyZXR1cm4gZmFsc2U7XG5cdCAgfTtcbiAgXHQgIHJldHVybiAvRk9HLy50ZXN0KHRoaXMud2VhdGhlckFzU3RyaW5nKCkpO1xuICB9XG5cbiAgaXNSVkZSKCkgOiBib29sZWFuIHtcbiAgXHRpZiAoKHRoaXMud3gudmlzLm1pbiA8PSA1MDAwKSAmJiAodGhpcy53eC52aXMubWluID49IDE2MDApKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaXNWRlIoKSA6IGJvb2xlYW4ge1xuICBcdGlmICh0aGlzLmlzUlZGUigpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbiAgXHRpZiAodGhpcy53eC52aXMubWluIDw9IDUwMDApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0bGV0IGNsb3VkcyA9IHRoaXMud3guY2xvdWQ7XG5cdGxldCBjb3ZlcmFnZSA9IDA7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgY2xvdWRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0bGV0IGMgPSBjbG91ZHNbaV07XG5cdFx0aWYgKGMuYmFzZSA8IDE4MDApIHtcblx0XHRcdGNvdmVyYWdlICs9IGMuY292ZXJhZ2U7XG5cdFx0fVxuXHR9XG5cdGlmIChjb3ZlcmFnZSA+PSAyKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiB0cnVlO1xuICB9XG4gIFxuICBpc0lNQygpIDogYm9vbGVhbiB7XG4gIFx0aWYgKHRoaXMud3gudmlzLm1pbiA8PSA1MDAwKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0bGV0IGNsb3VkcyA9IHRoaXMud3guY2xvdWQ7XG5cdGxldCBjb3ZlcmFnZSA9IDA7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgY2xvdWRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0bGV0IGMgPSBjbG91ZHNbaV07XG5cdFx0aWYgKGMuYmFzZSA8IDE4MDApIHtcblx0XHRcdGNvdmVyYWdlICs9IGMuY292ZXJhZ2U7XG5cdFx0fVxuXHR9XG5cdGlmIChjb3ZlcmFnZSA+PSA3KSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY2xvdWRBc1N0cmluZygpIDogc3RyaW5nIHtcbiAgXHRpZiAodGhpcy53eC5jbG91ZC5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gJ25pbCc7XG5cdH0gZWxzZSB7XG5cdFx0bGV0IHN0ID0gJyc7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnd4LmNsb3VkLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRsZXQgY2xvdWQ6IENsb3VkID0gdGhpcy53eC5jbG91ZFtpXTtcblx0XHRcdHN0ICs9ICcgJyArIHRoaXMub2t0YXNUb1N0cmluZyhjbG91ZC5jb3ZlcmFnZSkgKyAnICcgKyB0aGlzLnN0TnVtYmVyKGNsb3VkLmJhc2UpO1xuXHRcdH1cblx0XHRyZXR1cm4gc3Q7XG5cdH1cbiAgfVxuXG4gIHdlYXRoZXJBc1N0cmluZygpIDogc3RyaW5nIHtcbiAgXHRpZiAodGhpcy53eC53eC5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gJyc7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHRoaXMud3gud3guam9pbignLCAnKTtcblx0fVxuICB9XG5cbiAgIHB1YmxpYyB0b051bWJlcnMobjogbnVtYmVyKSA6IHN0cmluZyB7XG4gICBcdGxldCBtYXAgPSB7XG5cdFx0JzAnOiAnemVybycsXG5cdFx0JzEnOiAnd3VuJyxcblx0XHQnMic6ICd0d28nLFxuXHRcdCczJzogJ3RocmVlJyxcblx0XHQnNCc6ICdmb3JlJyxcblx0XHQnNSc6ICdmaWZlJyxcblx0XHQnNic6ICdzaXgnLFxuXHRcdCc3JzogJ3NlZmZlbicsXG5cdFx0JzgnOiAnZWlnaHQnLFxuXHRcdCc5JzogJ25pbmVyJyxcblx0XHR9O1xuICAgXHRsZXQgbnN0ID0gbi50b1N0cmluZygpO1xuXHRsZXQgZCA9IG5zdC5zcGxpdCgnJyk7XG5cdGxldCByZXNwb25zZTogc3RyaW5nW10gPSBbXTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBkLmxlbmd0aDsgaSsrKSB7XG5cdFx0bGV0IGRzdCA9IGRbaV07XG5cdFx0bGV0IGRQaG9uID0gbWFwW2RzdF07XG5cdFx0aWYgKGRQaG9uICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJlc3BvbnNlLnB1c2goZFBob24pO1xuXHRcdH0gZWxzZSB7XG5cdFx0cmVzcG9uc2UucHVzaChkc3QpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzcG9uc2Uuam9pbignICcpO1xuICAgfVxuXG5cbn1cbiJdfQ==