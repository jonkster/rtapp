"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nativescript_ng2_fonticon_1 = require("nativescript-ng2-fonticon");
var WeatherService = /** @class */ (function () {
    function WeatherService(fonticon) {
        this.fonticon = fonticon;
        this.wx = {};
        this.qnhNumber = 1013;
        this.createNewWeather();
    }
    WeatherService.prototype.createNewWeather = function () {
        this.generateWx();
        return this.wx;
    };
    WeatherService.prototype.setWx = function (wx) {
        this.wx.wx.push(wx);
    };
    WeatherService.prototype.setVis = function (visMax, visMin, comment) {
        this.wx.vis = {};
        this.wx.vis.max = visMax;
        this.wx.vis.min = visMin;
        this.wx.vis.comment = comment;
    };
    WeatherService.prototype.setWind = function (direction, variation, strength, gustStrength) {
        this.wx.windStrength = strength;
        this.wx.windGustStrength = gustStrength;
        this.wx.windDirection = direction;
        this.wx.windDirectionVariation = variation;
    };
    WeatherService.prototype.setCloud = function (base, tops, coverage) {
        var cloud = {};
        cloud.base = base;
        cloud.tops = tops;
        cloud.coverage = coverage;
        this.wx.cloud.push(cloud);
    };
    WeatherService.prototype.setTemp = function (temp, dewpoint) {
        this.wx.temp = temp;
        this.wx.dewpoint = dewpoint;
    };
    WeatherService.prototype.getGroundCondition = function () {
        return this.wx.groundCondition;
    };
    WeatherService.prototype.setGround = function (cond) {
        this.wx.groundCondition = cond;
    };
    WeatherService.prototype.generateWind = function () {
        var windStrength = Math.floor(Math.random() * 17);
        var windGustStrength = Math.floor(Math.random() * 10);
        var windDirection = Math.floor(Math.random() * 36) * 10;
        var windDirectionVariation = Math.floor(Math.random() * 4) * 10;
        this.setWind(windDirection, windDirectionVariation, windStrength, windGustStrength);
    };
    WeatherService.prototype.generateTemp = function () {
        var temp = Math.floor(5 + Math.random() * 35);
        var rh = 50 + 50 * Math.random();
        var dewpoint = Math.floor(temp - (100 - rh) / 5);
        this.setTemp(temp, dewpoint);
    };
    WeatherService.prototype.generateWx = function () {
        this.qnhNumber = Math.floor(1023 - (Math.random() * 20));
        this.wx.qnh = this.toNumbers(this.qnhNumber);
        this.wx.cloud = [];
        this.generateWind();
        this.generateTemp();
        this.setVis(9999, 9999, '');
        this.setGround('');
        this.wx.wx = [];
        var maxOpts = 10;
        var dice = Math.round(Math.random() * maxOpts);
        var subDice = Math.round(Math.random() * maxOpts);
        switch (dice) {
            case 0:
                this.setWx('THUNDERSTORMS IN AREA');
                this.setCloud(2500, 14500, 3);
                this.setTemp(24, 18);
                var dir = Math.round(Math.random() * 36) * 10;
                var v = dir + 40;
                this.setWind(dir, v, 15, 20);
                this.setGround('WATER PATCHES');
                break;
            case 1:
                this.setWx('SHOWERS OF RAIN IN AREA');
                this.setCloud(2000, 4500, 6);
                this.setVis(9999, 4000, 'IN RAIN');
                this.setGround('WET');
                break;
            case 2:
                this.setWx('FOG IN AREA');
                this.setCloud(500, 1200, 7);
                this.setVis(2000, 400, 'IN FOG');
                this.setWind(0, 0, 0, 0);
                this.setTemp(11, 11);
                break;
            case 3:
                this.setWx('FOG');
                this.setVis(500, 500, 'IN FOG');
                this.wx.cloud = [];
                this.setWind(0, 0, 0, 0);
                this.setTemp(10, 10);
                this.setGround('DAMP');
                break;
            case 4:
            case 5:
            case 6:
                this.generateCloud();
                break;
            case 7:
            case 8:
            default:
                this.setWx('CAVOK');
                this.setVis(9999, 9999, '');
                break;
        }
        this.processCloud();
        console.log(this.awis());
    };
    WeatherService.prototype.generateCloud = function () {
        var layers = Math.round(Math.random() * 3);
        var alts = [800, 1500, 2000, 2500, 3000, 3500, 4000, 5000, 7000];
        this.wx.cloud = [];
        var coverage = Math.round(Math.random() * 8);
        for (var i = 0; i < layers; i++) {
            var layerI = Math.round(Math.random() * alts.length);
            var base = alts[layerI];
            var extent = Math.round(Math.random() * 3000);
            var tops = base + extent;
            this.setCloud(base, tops, coverage);
            if (++coverage > 8) {
                return;
            }
        }
    };
    WeatherService.prototype.oktasToString = function (o) {
        if (o >= 8) {
            return 'overcast';
        }
        else if (o > 4) {
            return 'broken';
        }
        else if (o > 3) {
            return 'scattered';
        }
        else if (o > 1) {
            return 'few';
        }
        else if (o > 0) {
            return 'isolated';
        }
        return '';
    };
    WeatherService.prototype.visAsString = function () {
        var v = this.stNumber(this.wx.vis.max) + ' metres';
        if (this.wx.vis.max === 9999) {
            v = 'greater than ten kilometres';
        }
        else if (this.wx.vis.max > 5000) {
            v = this.stNumber(this.wx.vis.max / 1000) + ' kilometres';
        }
        if (this.wx.vis.max > this.wx.vis.min) {
            v += ' reducing to ';
            if (this.wx.vis.min === 9999) {
                v += ' greater than ten kilometres';
            }
            else if (this.wx.vis.min > 5000) {
                v += this.stNumber(this.wx.vis.min / 1000) + ' kilometres';
            }
            else {
                v += this.stNumber(this.wx.vis.min) + ' metres';
            }
            v += ' ' + this.wx.vis.comment;
        }
        return v;
    };
    WeatherService.prototype.stNumber = function (n) {
        if (n === undefined) {
            return '';
        }
        var digits = n.toString().split('');
        if (n >= 1000) {
            var nst = this.toNumbers(Number(digits[0])) + ' thousand';
            if (digits[1] !== '0') {
                nst += ' ' + this.toNumbers(Number(digits[1])) + ' hundred';
            }
            return nst;
        }
        else if (n >= 100) {
            var nst = this.toNumbers(Number(digits[0])) + ' hundred';
            return nst;
        }
        else {
            var nst = this.toNumbers(n);
        }
    };
    WeatherService.prototype.awis = function () {
        var st = "wind: " + this.windAsString() + "  QNH " + this.wx.qnh + ", Temperature " + this.wx.temp + " dewpoint " + this.wx.dewpoint + ", visibility " + this.visAsString() + " " + this.wx.groundCondition + " cloud " + this.cloudAsString() + " " + this.weatherAsString() + "\n\n";
        return st;
    };
    WeatherService.prototype.processCloud = function () {
        var c = {};
        for (var i = 0; i < this.wx.cloud.length; i++) {
            var cloud = this.wx.cloud[i];
            c[cloud.base] = cloud;
        }
        this.wx.cloud = [];
        var alts = Object.keys(c).sort();
        for (var i = 0; i < alts.length; i++) {
            this.wx.cloud.push(c[alts[i]]);
        }
    };
    WeatherService.prototype.windAsString = function () {
        if (this.wx.windStrength === 0) {
            return 'calm';
        }
        else if (this.wx.windStrength <= 4) {
            return 'variable';
        }
        var st = '';
        if (this.wx.windDirectionVariation > 0) {
            var windDirTo = (this.wx.windDirection + this.wx.windDirectionVariation % 360);
            st = 'varying between ' + this.toNumbers(this.wx.windDirection) + ' and ' + this.toNumbers(windDirTo);
        }
        else {
            st = this.toNumbers(this.wx.windDirection);
        }
        st += ' degrees, ';
        if (this.wx.windGustStrength > this.wx.windStrength) {
            st += ' minimum ' + this.toNumbers(this.wx.windStrength) + ' maximum ' + this.toNumbers(this.wx.windGustStrength) + ' knots';
        }
        else {
            st += ' ' + this.toNumbers(this.wx.windStrength) + ' knots';
        }
        return st;
    };
    WeatherService.prototype.visAsShorthand = function () {
        var v = (this.wx.vis.max).toString() + 'm';
        if (this.wx.vis.max === 9999) {
            v = '>10k';
        }
        else if (this.wx.vis.max > 5000) {
            v = (this.wx.vis.max / 1000).toString() + 'k';
        }
        if (this.wx.vis.max > this.wx.vis.min) {
            console.log(this.fonticon.css.mdi['mdi-add']);
            v += "â†“";
            if (this.wx.vis.min === 9999) {
                v += ' >10k';
            }
            else if (this.wx.vis.min > 5000) {
                v += (this.wx.vis.min / 1000).toString() + 'k';
            }
            else {
                v += this.wx.vis.min.toString() + 'm';
            }
            v += ' ' + this.wx.vis.comment.toLowerCase();
        }
        return v;
    };
    WeatherService.prototype.shorthand = function (st) {
        st = st.replace(/thunderstorms/ig, 'ts');
        st = st.replace(/showers/ig, 'shwrs');
        st = st.replace(/ of /ig, ' ');
        st = st.replace(/rain/ig, 'rn');
        st = st.replace(/in area/ig, 'area');
        st = st.replace(/fog/ig, 'fg');
        st = st.replace(/smoke/ig, 'fu');
        st = st.replace(/mist/ig, 'br');
        st = st.replace(/isolated/ig, 'isol');
        st = st.replace(/broken/ig, 'bkn');
        st = st.replace(/scattered/ig, 'sct');
        st = st.replace(/overcast/ig, 'ovc');
        return st;
    };
    WeatherService.prototype.cloudAsShorthand = function () {
        if (this.wx.cloud.length === 0) {
            return '';
        }
        else if (this.isCAVOK()) {
            return '';
        }
        else {
            var st = '';
            for (var i = 0; i < this.wx.cloud.length; i++) {
                var cloud = this.wx.cloud[i];
                st += ' ' + this.oktasToString(cloud.coverage) + ' ' + cloud.base;
            }
            st = this.shorthand(st);
            return st;
        }
    };
    WeatherService.prototype.qnhAsShorthand = function () {
        return 'Q' + this.qnhNumber.toString();
    };
    WeatherService.prototype.wxAsShorthand = function () {
        var wx = '';
        if (this.wx.wx.length > 0) {
            wx = this.wx.wx.join(', ');
        }
        wx = this.shorthand(wx);
        console.log(wx);
        return wx;
    };
    WeatherService.prototype.windAsShorthand = function () {
        var wind = '';
        if (this.wx.windStrength === 0) {
            return 'wnd clm';
        }
        else if (this.wx.windStrength <= 4) {
            return 'wnd vbl';
        }
        var st = '';
        if (this.wx.windDirectionVariation > 0) {
            var windDirTo = (this.wx.windDirection + this.wx.windDirectionVariation % 360);
            st = this.wx.windDirection + ' - ' + windDirTo;
        }
        else {
            st = this.wx.windDirection.toString();
        }
        st += '/';
        if (this.wx.windGustStrength > this.wx.windStrength) {
            st += this.wx.windStrength + ' - ' + this.wx.windGustStrength;
        }
        else {
            st += this.wx.windStrength.toString();
        }
        return st;
    };
    WeatherService.prototype.isCAVOK = function () {
        return /CAVOK/.test(this.weatherAsString());
    };
    WeatherService.prototype.isFOG = function () {
        if (/FOG IN AREA/.test(this.weatherAsString())) {
            return false;
        }
        ;
        return /FOG/.test(this.weatherAsString());
    };
    WeatherService.prototype.isRVFR = function () {
        if ((this.wx.vis.min <= 5000) && (this.wx.vis.min >= 1600)) {
            return true;
        }
        return false;
    };
    WeatherService.prototype.isVFR = function () {
        if (this.isRVFR()) {
            return true;
        }
        if (this.wx.vis.min <= 5000) {
            return false;
        }
        var clouds = this.wx.cloud;
        var coverage = 0;
        for (var i = 0; i < clouds.length; i++) {
            var c = clouds[i];
            if (c.base < 1800) {
                coverage += c.coverage;
            }
        }
        if (coverage >= 2) {
            return false;
        }
        return true;
    };
    WeatherService.prototype.isIMC = function () {
        if (this.wx.vis.min <= 5000) {
            return true;
        }
        var clouds = this.wx.cloud;
        var coverage = 0;
        for (var i = 0; i < clouds.length; i++) {
            var c = clouds[i];
            if (c.base < 1800) {
                coverage += c.coverage;
            }
        }
        if (coverage >= 7) {
            return true;
        }
        return false;
    };
    WeatherService.prototype.cloudAsString = function () {
        if (this.wx.cloud.length === 0) {
            return 'nil';
        }
        else {
            var st = '';
            for (var i = 0; i < this.wx.cloud.length; i++) {
                var cloud = this.wx.cloud[i];
                st += ' ' + this.oktasToString(cloud.coverage) + ' ' + this.stNumber(cloud.base);
            }
            return st;
        }
    };
    WeatherService.prototype.weatherAsString = function () {
        if (this.wx.wx.length === 0) {
            return '';
        }
        else {
            return this.wx.wx.join(', ');
        }
    };
    WeatherService.prototype.toNumbers = function (n) {
        var map = {
            '0': 'zero',
            '1': 'wun',
            '2': 'two',
            '3': 'three',
            '4': 'fore',
            '5': 'fife',
            '6': 'six',
            '7': 'seffen',
            '8': 'eight',
            '9': 'niner',
        };
        var nst = n.toString();
        var d = nst.split('');
        var response = [];
        for (var i = 0; i < d.length; i++) {
            var dst = d[i];
            var dPhon = map[dst];
            if (dPhon !== undefined) {
                response.push(dPhon);
            }
            else {
                response.push(dst);
            }
        }
        return response.join(' ');
    };
    WeatherService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [nativescript_ng2_fonticon_1.TNSFontIconService])
    ], WeatherService);
    return WeatherService;
}());
exports.WeatherService = WeatherService;
//# sourceMappingURL=data:application/json;base64,